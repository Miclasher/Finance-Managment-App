@page "/login"
@rendermode InteractiveServer
@inject IAuthService AuthService
@inject NavigationManager NavigationManager

<h3>Login</h3>
@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <p class="text-danger">@ErrorMessage</p>
}

<EditForm model="UserLoginDTO" class="container" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <div class="m-3">
        <label class="form-label" for="username">Username: </label>
        <InputText class="form-control" id="username" @bind-Value="UserLoginDTO.Username" />
        <ValidationMessage For="@(() => UserLoginDTO.Username)" />
    </div>
    <div class="m-3">
        <label class="form-label" for="password">Password: </label>
        <InputText class="form-control" id="password" @bind-Value="UserLoginDTO.Password" type="password" />
        <ValidationMessage For="@(() => UserLoginDTO.Password)" />
    </div>
    <button class="btn btn-primary m-3" type="submit">Login</button>
</EditForm>

@code {
    private string? ErrorMessage { get; set; }
    private UserLoginDTO UserLoginDTO { get; set; } = new UserLoginDTO();

    private async Task HandleLogin()
    {
        try
        {
            await AuthService.LoginAsync(UserLoginDTO);
            NavigationManager.NavigateTo("/");
        }
        catch(Exception ex)
        {
            ErrorMessage = ex.Message;
        }
    }
}
